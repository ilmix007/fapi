# coding: utf-8

"""
    База кроссов автозапчастей FAPI. Описание доступа через API

    База кроссов автозапчастей FAPI. Описание доступа через API  # noqa: E501

    OpenAPI spec version: 1.0.3
    Contact: development.iisis@gmail.com
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six


class MessageListRow(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'i': 'int',
        'l': 'int',
        'd': 'str'
    }

    attribute_map = {
        'i': 'i',
        'l': 'l',
        'd': 'd'
    }

    def __init__(self, i=None, l=None, d=None):  # noqa: E501
        """MessageListRow - a model defined in Swagger"""  # noqa: E501

        self._i = None
        self._l = None
        self._d = None
        self.discriminator = None

        self.i = i
        self.l = l
        self.d = d

    @property
    def i(self):
        """Gets the i of this MessageListRow.  # noqa: E501

        Индекс сообщения  # noqa: E501

        :return: The i of this MessageListRow.  # noqa: E501
        :rtype: int
        """
        return self._i

    @i.setter
    def i(self, i):
        """Sets the i of this MessageListRow.

        Индекс сообщения  # noqa: E501

        :param i: The i of this MessageListRow.  # noqa: E501
        :type: int
        """
        if i is None:
            raise ValueError("Invalid value for `i`, must not be `None`")  # noqa: E501

        self._i = i

    @property
    def l(self):
        """Gets the l of this MessageListRow.  # noqa: E501

        Уровень важности  # noqa: E501

        :return: The l of this MessageListRow.  # noqa: E501
        :rtype: int
        """
        return self._l

    @l.setter
    def l(self, l):
        """Sets the l of this MessageListRow.

        Уровень важности  # noqa: E501

        :param l: The l of this MessageListRow.  # noqa: E501
        :type: int
        """
        if l is None:
            raise ValueError("Invalid value for `l`, must not be `None`")  # noqa: E501

        self._l = l

    @property
    def d(self):
        """Gets the d of this MessageListRow.  # noqa: E501

        Описание сообщения  # noqa: E501

        :return: The d of this MessageListRow.  # noqa: E501
        :rtype: str
        """
        return self._d

    @d.setter
    def d(self, d):
        """Sets the d of this MessageListRow.

        Описание сообщения  # noqa: E501

        :param d: The d of this MessageListRow.  # noqa: E501
        :type: str
        """
        if d is None:
            raise ValueError("Invalid value for `d`, must not be `None`")  # noqa: E501

        self._d = d

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(MessageListRow, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, MessageListRow):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
