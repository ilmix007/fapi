# coding: utf-8

"""
    База кроссов автозапчастей FAPI. Описание доступа через API

    База кроссов автозапчастей FAPI. Описание доступа через API  # noqa: E501

    OpenAPI spec version: 1.0.3
    Contact: development.iisis@gmail.com
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


from __future__ import absolute_import

import re  # noqa: F401

# python 2 and python 3 compatibility library
import six

from swagger_client.api_client import ApiClient


class AnalogListApi(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    Ref: https://github.com/swagger-api/swagger-codegen
    """

    def __init__(self, api_client=None):
        if api_client is None:
            api_client = ApiClient()
        self.api_client = api_client

    def analog_list_get(self, n, **kwargs):  # noqa: E501
        """Получить кроссы  # noqa: E501

        Получить объект кроссы  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.analog_list_get(n, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str n: Артикул(номер) детали (required)
        :param int mfi: Индекс бренда
        :param int r: Фильтр по рейтингу кросса
        :param str o: Дополнительный фильтр: NOT_USE - не использовать дополнительный фильтр ONLY_OWN - только собственные(верные или битые), ar не учитывать CORRECT_AR - только собственные(верные) с участием фильтра по рейтингу. Если аналог не имеет указанного при фильтрации рейтинга, но указан как верный, он попадает в выдачу 
        :return: AnalogListV2
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.analog_list_get_with_http_info(n, **kwargs)  # noqa: E501
        else:
            (data) = self.analog_list_get_with_http_info(n, **kwargs)  # noqa: E501
            return data

    def analog_list_get_with_http_info(self, n, **kwargs):  # noqa: E501
        """Получить кроссы  # noqa: E501

        Получить объект кроссы  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.analog_list_get_with_http_info(n, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str n: Артикул(номер) детали (required)
        :param int mfi: Индекс бренда
        :param int r: Фильтр по рейтингу кросса
        :param str o: Дополнительный фильтр: NOT_USE - не использовать дополнительный фильтр ONLY_OWN - только собственные(верные или битые), ar не учитывать CORRECT_AR - только собственные(верные) с участием фильтра по рейтингу. Если аналог не имеет указанного при фильтрации рейтинга, но указан как верный, он попадает в выдачу 
        :return: AnalogListV2
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['n', 'mfi', 'r', 'o']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method analog_list_get" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'n' is set
        if ('n' not in params or
                params['n'] is None):
            raise ValueError("Missing the required parameter `n` when calling `analog_list_get`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'n' in params:
            query_params.append(('n', params['n']))  # noqa: E501
        if 'mfi' in params:
            query_params.append(('mfi', params['mfi']))  # noqa: E501
        if 'r' in params:
            query_params.append(('r', params['r']))  # noqa: E501
        if 'o' in params:
            query_params.append(('o', params['o']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['api_key']  # noqa: E501

        return self.api_client.call_api(
            '/analogList', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='AnalogListV2',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def analog_list_post(self, ui, **kwargs):  # noqa: E501
        """Добавить кроссы в общую базу  # noqa: E501

        Добавление кроссов в общую базу. Добавить можно сразу несколько кроссов. При добавлении одного или нескольких кроссов автоматически происходит голосование за кросс. Через данный метод можно также голосовать за битый кросс(За это отвечает свойство _int - 0(кросс верный), 1(кросс битый))  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.analog_list_post(ui, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str ui: Идентификатор пользователя (required)
        :param AnalogListPost inventory_item: Inventory item to add
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.analog_list_post_with_http_info(ui, **kwargs)  # noqa: E501
        else:
            (data) = self.analog_list_post_with_http_info(ui, **kwargs)  # noqa: E501
            return data

    def analog_list_post_with_http_info(self, ui, **kwargs):  # noqa: E501
        """Добавить кроссы в общую базу  # noqa: E501

        Добавление кроссов в общую базу. Добавить можно сразу несколько кроссов. При добавлении одного или нескольких кроссов автоматически происходит голосование за кросс. Через данный метод можно также голосовать за битый кросс(За это отвечает свойство _int - 0(кросс верный), 1(кросс битый))  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.analog_list_post_with_http_info(ui, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str ui: Идентификатор пользователя (required)
        :param AnalogListPost inventory_item: Inventory item to add
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['ui', 'inventory_item']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method analog_list_post" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'ui' is set
        if ('ui' not in params or
                params['ui'] is None):
            raise ValueError("Missing the required parameter `ui` when calling `analog_list_post`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'ui' in params:
            query_params.append(('ui', params['ui']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'inventory_item' in params:
            body_params = params['inventory_item']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['api_key']  # noqa: E501

        return self.api_client.call_api(
            '/analogList', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)
