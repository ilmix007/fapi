# coding: utf-8

"""
    База кроссов автозапчастей FAPI. Описание доступа через API

    База кроссов автозапчастей FAPI. Описание доступа через API  # noqa: E501

    OpenAPI spec version: 1.0.3
    Contact: development.iisis@gmail.com
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


from __future__ import absolute_import

import re  # noqa: F401

# python 2 and python 3 compatibility library
import six

from swagger_client.api_client import ApiClient


class CatalogDtApi(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    Ref: https://github.com/swagger-api/swagger-codegen
    """

    def __init__(self, api_client=None):
        if api_client is None:
            api_client = ApiClient()
        self.api_client = api_client

    def catalog_list_dt_manufacturer_list_get(self, **kwargs):  # noqa: E501
        """Получение списка производителей  # noqa: E501

        Метод используют для выпадающего списка для выбора производителя  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.catalog_list_dt_manufacturer_list_get(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :return: ManufacturerList
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.catalog_list_dt_manufacturer_list_get_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.catalog_list_dt_manufacturer_list_get_with_http_info(**kwargs)  # noqa: E501
            return data

    def catalog_list_dt_manufacturer_list_get_with_http_info(self, **kwargs):  # noqa: E501
        """Получение списка производителей  # noqa: E501

        Метод используют для выпадающего списка для выбора производителя  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.catalog_list_dt_manufacturer_list_get_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :return: ManufacturerList
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = []  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method catalog_list_dt_manufacturer_list_get" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['api_key']  # noqa: E501

        return self.api_client.call_api(
            '/catalogList/dt/manufacturerList', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='ManufacturerList',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def catalog_list_dt_model_list_get(self, mfi, **kwargs):  # noqa: E501
        """Список моделей  # noqa: E501

        Получение списка моделей по выбранной марке автомобиля  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.catalog_list_dt_model_list_get(mfi, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int mfi: Идентификатор производителя (required)
        :return: ModelList
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.catalog_list_dt_model_list_get_with_http_info(mfi, **kwargs)  # noqa: E501
        else:
            (data) = self.catalog_list_dt_model_list_get_with_http_info(mfi, **kwargs)  # noqa: E501
            return data

    def catalog_list_dt_model_list_get_with_http_info(self, mfi, **kwargs):  # noqa: E501
        """Список моделей  # noqa: E501

        Получение списка моделей по выбранной марке автомобиля  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.catalog_list_dt_model_list_get_with_http_info(mfi, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int mfi: Идентификатор производителя (required)
        :return: ModelList
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['mfi']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method catalog_list_dt_model_list_get" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'mfi' is set
        if ('mfi' not in params or
                params['mfi'] is None):
            raise ValueError("Missing the required parameter `mfi` when calling `catalog_list_dt_model_list_get`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'mfi' in params:
            query_params.append(('mfi', params['mfi']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['api_key']  # noqa: E501

        return self.api_client.call_api(
            '/catalogList/dt/modelList', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='ModelList',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def catalog_list_dt_modification_list_get(self, mi, **kwargs):  # noqa: E501
        """Список модификаций модели  # noqa: E501

        Получение списка модификаций по выбранной модели  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.catalog_list_dt_modification_list_get(mi, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int mi: Идентификатор(dbi) модели (required)
        :return: ModificationList
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.catalog_list_dt_modification_list_get_with_http_info(mi, **kwargs)  # noqa: E501
        else:
            (data) = self.catalog_list_dt_modification_list_get_with_http_info(mi, **kwargs)  # noqa: E501
            return data

    def catalog_list_dt_modification_list_get_with_http_info(self, mi, **kwargs):  # noqa: E501
        """Список модификаций модели  # noqa: E501

        Получение списка модификаций по выбранной модели  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.catalog_list_dt_modification_list_get_with_http_info(mi, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int mi: Идентификатор(dbi) модели (required)
        :return: ModificationList
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['mi']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method catalog_list_dt_modification_list_get" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'mi' is set
        if ('mi' not in params or
                params['mi'] is None):
            raise ValueError("Missing the required parameter `mi` when calling `catalog_list_dt_modification_list_get`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'mi' in params:
            query_params.append(('mi', params['mi']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['api_key']  # noqa: E501

        return self.api_client.call_api(
            '/catalogList/dt/modificationList', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='ModificationList',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)
