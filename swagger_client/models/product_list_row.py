# coding: utf-8

"""
    База кроссов автозапчастей FAPI. Описание доступа через API

    База кроссов автозапчастей FAPI. Описание доступа через API  # noqa: E501

    OpenAPI spec version: 1.0.3
    Contact: development.iisis@gmail.com
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six


class ProductListRow(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'i': 'int',
        'mfi': 'int',
        'ns': 'str',
        'n': 'str',
        'd': 'str',
        'dbi': 'int'
    }

    attribute_map = {
        'i': 'i',
        'mfi': 'mfi',
        'ns': 'ns',
        'n': 'n',
        'd': 'd',
        'dbi': 'dbi'
    }

    def __init__(self, i=None, mfi=None, ns=None, n=None, d=None, dbi=None):  # noqa: E501
        """ProductListRow - a model defined in Swagger"""  # noqa: E501

        self._i = None
        self._mfi = None
        self._ns = None
        self._n = None
        self._d = None
        self._dbi = None
        self.discriminator = None

        self.i = i
        self.mfi = mfi
        self.ns = ns
        self.n = n
        self.d = d
        self.dbi = dbi

    @property
    def i(self):
        """Gets the i of this ProductListRow.  # noqa: E501

        Index / Индекс  # noqa: E501

        :return: The i of this ProductListRow.  # noqa: E501
        :rtype: int
        """
        return self._i

    @i.setter
    def i(self, i):
        """Sets the i of this ProductListRow.

        Index / Индекс  # noqa: E501

        :param i: The i of this ProductListRow.  # noqa: E501
        :type: int
        """
        if i is None:
            raise ValueError("Invalid value for `i`, must not be `None`")  # noqa: E501

        self._i = i

    @property
    def mfi(self):
        """Gets the mfi of this ProductListRow.  # noqa: E501

        Manufacturer index / Внешний ключ на manufacturerListRow.i  # noqa: E501

        :return: The mfi of this ProductListRow.  # noqa: E501
        :rtype: int
        """
        return self._mfi

    @mfi.setter
    def mfi(self, mfi):
        """Sets the mfi of this ProductListRow.

        Manufacturer index / Внешний ключ на manufacturerListRow.i  # noqa: E501

        :param mfi: The mfi of this ProductListRow.  # noqa: E501
        :type: int
        """
        if mfi is None:
            raise ValueError("Invalid value for `mfi`, must not be `None`")  # noqa: E501

        self._mfi = mfi

    @property
    def ns(self):
        """Gets the ns of this ProductListRow.  # noqa: E501

        Number standart / Стандартизированный номер(артикул) без спец. символов  # noqa: E501

        :return: The ns of this ProductListRow.  # noqa: E501
        :rtype: str
        """
        return self._ns

    @ns.setter
    def ns(self, ns):
        """Sets the ns of this ProductListRow.

        Number standart / Стандартизированный номер(артикул) без спец. символов  # noqa: E501

        :param ns: The ns of this ProductListRow.  # noqa: E501
        :type: str
        """
        if ns is None:
            raise ValueError("Invalid value for `ns`, must not be `None`")  # noqa: E501

        self._ns = ns

    @property
    def n(self):
        """Gets the n of this ProductListRow.  # noqa: E501

        Number / Номер(артикул)  # noqa: E501

        :return: The n of this ProductListRow.  # noqa: E501
        :rtype: str
        """
        return self._n

    @n.setter
    def n(self, n):
        """Sets the n of this ProductListRow.

        Number / Номер(артикул)  # noqa: E501

        :param n: The n of this ProductListRow.  # noqa: E501
        :type: str
        """
        if n is None:
            raise ValueError("Invalid value for `n`, must not be `None`")  # noqa: E501

        self._n = n

    @property
    def d(self):
        """Gets the d of this ProductListRow.  # noqa: E501

        Description / Описание детали  # noqa: E501

        :return: The d of this ProductListRow.  # noqa: E501
        :rtype: str
        """
        return self._d

    @d.setter
    def d(self, d):
        """Sets the d of this ProductListRow.

        Description / Описание детали  # noqa: E501

        :param d: The d of this ProductListRow.  # noqa: E501
        :type: str
        """
        if d is None:
            raise ValueError("Invalid value for `d`, must not be `None`")  # noqa: E501

        self._d = d

    @property
    def dbi(self):
        """Gets the dbi of this ProductListRow.  # noqa: E501

        Индекс в базе данных FAPI  # noqa: E501

        :return: The dbi of this ProductListRow.  # noqa: E501
        :rtype: int
        """
        return self._dbi

    @dbi.setter
    def dbi(self, dbi):
        """Sets the dbi of this ProductListRow.

        Индекс в базе данных FAPI  # noqa: E501

        :param dbi: The dbi of this ProductListRow.  # noqa: E501
        :type: int
        """
        if dbi is None:
            raise ValueError("Invalid value for `dbi`, must not be `None`")  # noqa: E501

        self._dbi = dbi

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(ProductListRow, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, ProductListRow):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
