# coding: utf-8

"""
    База кроссов автозапчастей FAPI. Описание доступа через API

    База кроссов автозапчастей FAPI. Описание доступа через API  # noqa: E501

    OpenAPI spec version: 1.0.3
    Contact: development.iisis@gmail.com
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six


class AnalogListRow(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'i': 'int',
        'pri': 'int',
        'si': 'int',
        'di': 'int',
        '_int': 'int',
        'rm': 'int',
        'rp': 'int',
        'pi': 'int',
        'mfi': 'int',
        'ns': 'str',
        'pai': 'int',
        'mfai': 'int',
        'nsa': 'str'
    }

    attribute_map = {
        'i': 'i',
        'pri': 'pri',
        'si': 'si',
        'di': 'di',
        '_int': '_int',
        'rm': 'rm',
        'rp': 'rp',
        'pi': 'pi',
        'mfi': 'mfi',
        'ns': 'ns',
        'pai': 'pai',
        'mfai': 'mfai',
        'nsa': 'nsa'
    }

    def __init__(self, i=None, pri=None, si=None, di=None, _int=None, rm=None, rp=None, pi=None, mfi=None, ns=None, pai=None, mfai=None, nsa=None):  # noqa: E501
        """AnalogListRow - a model defined in Swagger"""  # noqa: E501

        self._i = None
        self._pri = None
        self._si = None
        self._di = None
        self.__int = None
        self._rm = None
        self._rp = None
        self._pi = None
        self._mfi = None
        self._ns = None
        self._pai = None
        self._mfai = None
        self._nsa = None
        self.discriminator = None

        self.i = i
        if pri is not None:
            self.pri = pri
        if si is not None:
            self.si = si
        if di is not None:
            self.di = di
        self._int = _int
        self.rm = rm
        self.rp = rp
        self.pi = pi
        self.mfi = mfi
        self.ns = ns
        self.pai = pai
        self.mfai = mfai
        self.nsa = nsa

    @property
    def i(self):
        """Gets the i of this AnalogListRow.  # noqa: E501

        Index / Индекс  # noqa: E501

        :return: The i of this AnalogListRow.  # noqa: E501
        :rtype: int
        """
        return self._i

    @i.setter
    def i(self, i):
        """Sets the i of this AnalogListRow.

        Index / Индекс  # noqa: E501

        :param i: The i of this AnalogListRow.  # noqa: E501
        :type: int
        """
        if i is None:
            raise ValueError("Invalid value for `i`, must not be `None`")  # noqa: E501

        self._i = i

    @property
    def pri(self):
        """Gets the pri of this AnalogListRow.  # noqa: E501

        Не используется  # noqa: E501

        :return: The pri of this AnalogListRow.  # noqa: E501
        :rtype: int
        """
        return self._pri

    @pri.setter
    def pri(self, pri):
        """Sets the pri of this AnalogListRow.

        Не используется  # noqa: E501

        :param pri: The pri of this AnalogListRow.  # noqa: E501
        :type: int
        """

        self._pri = pri

    @property
    def si(self):
        """Gets the si of this AnalogListRow.  # noqa: E501

        Не используется  # noqa: E501

        :return: The si of this AnalogListRow.  # noqa: E501
        :rtype: int
        """
        return self._si

    @si.setter
    def si(self, si):
        """Sets the si of this AnalogListRow.

        Не используется  # noqa: E501

        :param si: The si of this AnalogListRow.  # noqa: E501
        :type: int
        """

        self._si = si

    @property
    def di(self):
        """Gets the di of this AnalogListRow.  # noqa: E501

        Не используется  # noqa: E501

        :return: The di of this AnalogListRow.  # noqa: E501
        :rtype: int
        """
        return self._di

    @di.setter
    def di(self, di):
        """Sets the di of this AnalogListRow.

        Не используется  # noqa: E501

        :param di: The di of this AnalogListRow.  # noqa: E501
        :type: int
        """

        self._di = di

    @property
    def _int(self):
        """Gets the _int of this AnalogListRow.  # noqa: E501

        Маркер(битый | верный), если вы голосовали или добавляли кросс. Значения: -1 - не установлен; 1 - кросс БИТЫЙ; 0 - кросс ВЕРНЫЙ  # noqa: E501

        :return: The _int of this AnalogListRow.  # noqa: E501
        :rtype: int
        """
        return self.__int

    @_int.setter
    def _int(self, _int):
        """Sets the _int of this AnalogListRow.

        Маркер(битый | верный), если вы голосовали или добавляли кросс. Значения: -1 - не установлен; 1 - кросс БИТЫЙ; 0 - кросс ВЕРНЫЙ  # noqa: E501

        :param _int: The _int of this AnalogListRow.  # noqa: E501
        :type: int
        """
        if _int is None:
            raise ValueError("Invalid value for `_int`, must not be `None`")  # noqa: E501

        self.__int = _int

    @property
    def rm(self):
        """Gets the rm of this AnalogListRow.  # noqa: E501

        Rating minus / Количество голосов участников и программных обработчиков, что кросс БИТЫЙ  # noqa: E501

        :return: The rm of this AnalogListRow.  # noqa: E501
        :rtype: int
        """
        return self._rm

    @rm.setter
    def rm(self, rm):
        """Sets the rm of this AnalogListRow.

        Rating minus / Количество голосов участников и программных обработчиков, что кросс БИТЫЙ  # noqa: E501

        :param rm: The rm of this AnalogListRow.  # noqa: E501
        :type: int
        """
        if rm is None:
            raise ValueError("Invalid value for `rm`, must not be `None`")  # noqa: E501

        self._rm = rm

    @property
    def rp(self):
        """Gets the rp of this AnalogListRow.  # noqa: E501

        Rating plus / Количество голосов участников и программных обработчиков, что кросс ВЕРНЫЙ  # noqa: E501

        :return: The rp of this AnalogListRow.  # noqa: E501
        :rtype: int
        """
        return self._rp

    @rp.setter
    def rp(self, rp):
        """Sets the rp of this AnalogListRow.

        Rating plus / Количество голосов участников и программных обработчиков, что кросс ВЕРНЫЙ  # noqa: E501

        :param rp: The rp of this AnalogListRow.  # noqa: E501
        :type: int
        """
        if rp is None:
            raise ValueError("Invalid value for `rp`, must not be `None`")  # noqa: E501

        self._rp = rp

    @property
    def pi(self):
        """Gets the pi of this AnalogListRow.  # noqa: E501

        Ссылка на ДЕТАЛЬ (внешний ключ на productList.i)  # noqa: E501

        :return: The pi of this AnalogListRow.  # noqa: E501
        :rtype: int
        """
        return self._pi

    @pi.setter
    def pi(self, pi):
        """Sets the pi of this AnalogListRow.

        Ссылка на ДЕТАЛЬ (внешний ключ на productList.i)  # noqa: E501

        :param pi: The pi of this AnalogListRow.  # noqa: E501
        :type: int
        """
        if pi is None:
            raise ValueError("Invalid value for `pi`, must not be `None`")  # noqa: E501

        self._pi = pi

    @property
    def mfi(self):
        """Gets the mfi of this AnalogListRow.  # noqa: E501

        Manufacturer index / Ссылка на БРЕНД (внешний ключ на manufacturerList.i)  # noqa: E501

        :return: The mfi of this AnalogListRow.  # noqa: E501
        :rtype: int
        """
        return self._mfi

    @mfi.setter
    def mfi(self, mfi):
        """Sets the mfi of this AnalogListRow.

        Manufacturer index / Ссылка на БРЕНД (внешний ключ на manufacturerList.i)  # noqa: E501

        :param mfi: The mfi of this AnalogListRow.  # noqa: E501
        :type: int
        """
        if mfi is None:
            raise ValueError("Invalid value for `mfi`, must not be `None`")  # noqa: E501

        self._mfi = mfi

    @property
    def ns(self):
        """Gets the ns of this AnalogListRow.  # noqa: E501

        Стандартизированный НОМЕР  # noqa: E501

        :return: The ns of this AnalogListRow.  # noqa: E501
        :rtype: str
        """
        return self._ns

    @ns.setter
    def ns(self, ns):
        """Sets the ns of this AnalogListRow.

        Стандартизированный НОМЕР  # noqa: E501

        :param ns: The ns of this AnalogListRow.  # noqa: E501
        :type: str
        """
        if ns is None:
            raise ValueError("Invalid value for `ns`, must not be `None`")  # noqa: E501

        self._ns = ns

    @property
    def pai(self):
        """Gets the pai of this AnalogListRow.  # noqa: E501

        Ссылка на КРОСС_ДЕТАЛЬ (внешний ключ на productList.i)  # noqa: E501

        :return: The pai of this AnalogListRow.  # noqa: E501
        :rtype: int
        """
        return self._pai

    @pai.setter
    def pai(self, pai):
        """Sets the pai of this AnalogListRow.

        Ссылка на КРОСС_ДЕТАЛЬ (внешний ключ на productList.i)  # noqa: E501

        :param pai: The pai of this AnalogListRow.  # noqa: E501
        :type: int
        """
        if pai is None:
            raise ValueError("Invalid value for `pai`, must not be `None`")  # noqa: E501

        self._pai = pai

    @property
    def mfai(self):
        """Gets the mfai of this AnalogListRow.  # noqa: E501

        Manufacturer analog index / Ссылка на КРОСС_БРЕНД (внешний ключ на manufacturerList.i)  # noqa: E501

        :return: The mfai of this AnalogListRow.  # noqa: E501
        :rtype: int
        """
        return self._mfai

    @mfai.setter
    def mfai(self, mfai):
        """Sets the mfai of this AnalogListRow.

        Manufacturer analog index / Ссылка на КРОСС_БРЕНД (внешний ключ на manufacturerList.i)  # noqa: E501

        :param mfai: The mfai of this AnalogListRow.  # noqa: E501
        :type: int
        """
        if mfai is None:
            raise ValueError("Invalid value for `mfai`, must not be `None`")  # noqa: E501

        self._mfai = mfai

    @property
    def nsa(self):
        """Gets the nsa of this AnalogListRow.  # noqa: E501

        Стандартизированный КРОСС_НОМЕР  # noqa: E501

        :return: The nsa of this AnalogListRow.  # noqa: E501
        :rtype: str
        """
        return self._nsa

    @nsa.setter
    def nsa(self, nsa):
        """Sets the nsa of this AnalogListRow.

        Стандартизированный КРОСС_НОМЕР  # noqa: E501

        :param nsa: The nsa of this AnalogListRow.  # noqa: E501
        :type: str
        """
        if nsa is None:
            raise ValueError("Invalid value for `nsa`, must not be `None`")  # noqa: E501

        self._nsa = nsa

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(AnalogListRow, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, AnalogListRow):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
