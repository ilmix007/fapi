# coding: utf-8

"""
    База кроссов автозапчастей FAPI. Описание доступа через API

    База кроссов автозапчастей FAPI. Описание доступа через API  # noqa: E501

    OpenAPI spec version: 1.0.3
    Contact: development.iisis@gmail.com
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six


class AnalogListRowPost(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'mfa': 'str',
        'ns': 'str',
        'mfaa': 'str',
        'nsa': 'str',
        '_int': 'int'
    }

    attribute_map = {
        'mfa': 'mfa',
        'ns': 'ns',
        'mfaa': 'mfaa',
        'nsa': 'nsa',
        '_int': '_int'
    }

    def __init__(self, mfa=None, ns=None, mfaa=None, nsa=None, _int=None):  # noqa: E501
        """AnalogListRowPost - a model defined in Swagger"""  # noqa: E501

        self._mfa = None
        self._ns = None
        self._mfaa = None
        self._nsa = None
        self.__int = None
        self.discriminator = None

        self.mfa = mfa
        self.ns = ns
        self.mfaa = mfaa
        self.nsa = nsa
        self._int = _int

    @property
    def mfa(self):
        """Gets the mfa of this AnalogListRowPost.  # noqa: E501


        :return: The mfa of this AnalogListRowPost.  # noqa: E501
        :rtype: str
        """
        return self._mfa

    @mfa.setter
    def mfa(self, mfa):
        """Sets the mfa of this AnalogListRowPost.


        :param mfa: The mfa of this AnalogListRowPost.  # noqa: E501
        :type: str
        """
        if mfa is None:
            raise ValueError("Invalid value for `mfa`, must not be `None`")  # noqa: E501

        self._mfa = mfa

    @property
    def ns(self):
        """Gets the ns of this AnalogListRowPost.  # noqa: E501


        :return: The ns of this AnalogListRowPost.  # noqa: E501
        :rtype: str
        """
        return self._ns

    @ns.setter
    def ns(self, ns):
        """Sets the ns of this AnalogListRowPost.


        :param ns: The ns of this AnalogListRowPost.  # noqa: E501
        :type: str
        """
        if ns is None:
            raise ValueError("Invalid value for `ns`, must not be `None`")  # noqa: E501

        self._ns = ns

    @property
    def mfaa(self):
        """Gets the mfaa of this AnalogListRowPost.  # noqa: E501


        :return: The mfaa of this AnalogListRowPost.  # noqa: E501
        :rtype: str
        """
        return self._mfaa

    @mfaa.setter
    def mfaa(self, mfaa):
        """Sets the mfaa of this AnalogListRowPost.


        :param mfaa: The mfaa of this AnalogListRowPost.  # noqa: E501
        :type: str
        """
        if mfaa is None:
            raise ValueError("Invalid value for `mfaa`, must not be `None`")  # noqa: E501

        self._mfaa = mfaa

    @property
    def nsa(self):
        """Gets the nsa of this AnalogListRowPost.  # noqa: E501


        :return: The nsa of this AnalogListRowPost.  # noqa: E501
        :rtype: str
        """
        return self._nsa

    @nsa.setter
    def nsa(self, nsa):
        """Sets the nsa of this AnalogListRowPost.


        :param nsa: The nsa of this AnalogListRowPost.  # noqa: E501
        :type: str
        """
        if nsa is None:
            raise ValueError("Invalid value for `nsa`, must not be `None`")  # noqa: E501

        self._nsa = nsa

    @property
    def _int(self):
        """Gets the _int of this AnalogListRowPost.  # noqa: E501


        :return: The _int of this AnalogListRowPost.  # noqa: E501
        :rtype: int
        """
        return self.__int

    @_int.setter
    def _int(self, _int):
        """Sets the _int of this AnalogListRowPost.


        :param _int: The _int of this AnalogListRowPost.  # noqa: E501
        :type: int
        """
        if _int is None:
            raise ValueError("Invalid value for `_int`, must not be `None`")  # noqa: E501
        if _int is not None and _int > 1:  # noqa: E501
            raise ValueError("Invalid value for `_int`, must be a value less than or equal to `1`")  # noqa: E501
        if _int is not None and _int < 0:  # noqa: E501
            raise ValueError("Invalid value for `_int`, must be a value greater than or equal to `0`")  # noqa: E501

        self.__int = _int

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(AnalogListRowPost, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, AnalogListRowPost):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
